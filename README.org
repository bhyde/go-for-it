* Introduction

You can make it easy to install software by telling users to do this:

  curl http://example.com/install-my-stuff.sh | bash -

But that is not a habit that users should get into.  Who knows what
vile things that install script might do.

Go-for-it provides a scheme to make this a bit safer.  We assume
that the users have installed GnuPG and we ask them to add our
signing key to their keyring.  Our new instructions look like this:

  ./go-for-it http://example.com/install-my-stuff.sh.asc

and when the user runs that the go-for-it script checks the signature
on the shell script before running it.

We still don't know what vile things that script might be doing, but
at least we know "somebody" signed off on it.

* Usage -- running scripts.

Go-for-it is a bash script that will fetch another script via curl and
then execute it.  But these scripts are signed (and in fact they can
not be executed directly).

This script's filename should end with either ".sh" ".sh.asc".  If the
later it's signature (ala gpg's --clearsign) will be checked before
the actual script is recovered for execution.

When you do this you are deciding to trust who ever signed the script
not to mess up your machine.

This won't work if you haven't added the signing keys to your gpg
keyring.  When you do that you deciding that you may trust who ever
controls that key not to mess up your machine later, when you run
go-fo-it.

* Usage -- signing scripts

If you have a foo.sh script which you wish to sign the command to do
so is:

  gpg --default-key go-for-it@example.com --clearsign test.sh

Replace, if necessary, go-for-it@example.com with something to denote
the key your using.  Or you can use that key, which is found in
unsafe-signing-key-private.asc who passphrase is: go-for-it.

* Note, and a warning.

You probably only need to download the script go-for-it.  Grabing the
entire repository is unnecessary, and a bit dangerous.

You will probably prefer to make your own signing key (who's public
part you provide to users).
